/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import { fetch_archive_file_by_md5 as queryFetch_archive_file_by_md5Resolver } from "./resolvers/ArchiveFileResolver";
import { fetch_internet_archive_item_by_identifier as queryFetch_internet_archive_item_by_identifierResolver } from "./resolvers/InternetArchiveItemResolver";
import { fetch_skin_by_md5 as queryFetch_skin_by_md5Resolver } from "./resolvers/ModernSkinResolver";
import { fetch_tweet_by_url as queryFetch_tweet_by_urlResolver } from "./resolvers/TweetResolver";
import { me as queryMeResolver } from "./resolvers/UserResolver";
import { modern_skins as queryModern_skinsResolver } from "./ModernSkinsConnection";
import { node as queryNodeResolver } from "./resolvers/NodeResolver";
import { search_skins as querySearch_skinsResolver } from "./resolvers/SkinResolver";
import { skin_to_review as querySkin_to_reviewResolver } from "./resolvers/SkinResolver";
import { skins as querySkinsResolver } from "./SkinsConnection";
import { statistics as queryStatisticsResolver } from "./resolvers/DatabaseStatisticsResolver";
import { tweets as queryTweetsResolver } from "./TweetsConnection";
import { upload_statuses as queryUpload_statusesResolver } from "./resolvers/SkinUploadResolver";
import { upload_statuses_by_md5 as queryUpload_statuses_by_md5Resolver } from "./resolvers/SkinUploadResolver";
import { approve_skin as mutationApprove_skinResolver } from "./resolvers/SkinResolver";
import { mark_skin_nsfw as mutationMark_skin_nsfwResolver } from "./resolvers/SkinResolver";
import { reject_skin as mutationReject_skinResolver } from "./resolvers/SkinResolver";
import { request_nsfw_review_for_skin as mutationRequest_nsfw_review_for_skinResolver } from "./resolvers/SkinResolver";
import { send_feedback as mutationSend_feedbackResolver } from "./resolvers/MutationResolver";
import { upload as mutationUploadResolver } from "./resolvers/UploadMutationResolver";
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLBoolean, GraphQLInt, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLID, GraphQLEnumType, GraphQLInputObjectType } from "graphql";
const InternetArchiveItemType: GraphQLObjectType = new GraphQLObjectType({
    name: "InternetArchiveItem",
    fields() {
        return {
            identifier: {
                description: "The Internet Archive's unique identifier for this item",
                name: "identifier",
                type: GraphQLString
            },
            last_metadata_scrape_date_UNSTABLE: {
                description: "The date and time that we last scraped this item's metadata.\n**Note:** This field is temporary and will be removed in the future.\nThe date format is just what we get from the database, and it's ambiguous.",
                name: "last_metadata_scrape_date_UNSTABLE",
                type: GraphQLString
            },
            metadata_url: {
                description: "URL to get the Internet Archive's metadata for this item in JSON form.",
                name: "metadata_url",
                type: GraphQLString
            },
            raw_metadata_json: {
                description: "Our cached version of the metadata avaliable at \\`metadata_url\\` (above)",
                name: "raw_metadata_json",
                type: GraphQLString
            },
            skin: {
                description: "The skin that this item contains",
                name: "skin",
                type: SkinType
            },
            url: {
                description: "The URL where this item can be viewed on the Internet Archive",
                name: "url",
                type: GraphQLString
            }
        };
    }
});
const RatingType: GraphQLEnumType = new GraphQLEnumType({
    description: "The judgement made about a skin by a moderator",
    name: "Rating",
    values: {
        APPROVED: {
            value: "APPROVED"
        },
        NSFW: {
            value: "NSFW"
        },
        REJECTED: {
            value: "REJECTED"
        }
    }
});
const ReviewType: GraphQLObjectType = new GraphQLObjectType({
    name: "Review",
    description: "A review of a skin. Done either on the Museum's Tinder-style\nreview page, or via the Discord bot.",
    fields() {
        return {
            rating: {
                description: "The rating that the user gave the skin",
                name: "rating",
                type: RatingType
            },
            reviewer: {
                description: "The user who made the review (if known). **Note:** In the early days we didn't\ntrack this, so many will be null.",
                name: "reviewer",
                type: GraphQLString
            },
            skin: {
                description: "The skin that was reviewed",
                name: "skin",
                type: SkinType
            }
        };
    }
});
const TweetType: GraphQLObjectType = new GraphQLObjectType({
    name: "Tweet",
    description: "A tweet made by `@winampskins` mentioning a Winamp skin",
    fields() {
        return {
            likes: {
                description: "Number of likes the tweet has received. Updated nightly. (Note: Recent likes on older tweets may not be reflected here)",
                name: "likes",
                type: GraphQLInt
            },
            retweets: {
                description: "Number of retweets the tweet has received. Updated nightly. (Note: Recent retweets on older tweets may not be reflected here)",
                name: "retweets",
                type: GraphQLInt
            },
            skin: {
                description: "The skin featured in this Tweet",
                name: "skin",
                type: SkinType
            },
            url: {
                description: "URL of the tweet. **Note:** Early on in the bot's life we just recorded\n_which_ skins were tweeted, not any info about the actual tweet. This means we\ndon't always know the URL of the tweet.",
                name: "url",
                type: GraphQLString
            }
        };
    }
});
const SkinType: GraphQLInterfaceType = new GraphQLInterfaceType({
    description: "A Winamp skin. Could be modern or classic.\n\n**Note**: At some point in the future, this might be renamed to `Skin`.",
    name: "Skin",
    fields() {
        return {
            archive_files: {
                description: "List of files contained within the skin's .wsz archive",
                name: "archive_files",
                type: new GraphQLList(ArchiveFileType)
            },
            average_color: {
                deprecationReason: "Needed for migration",
                name: "average_color",
                type: GraphQLString
            },
            download_url: {
                description: "URL to download the skin",
                name: "download_url",
                type: GraphQLString
            },
            filename: {
                description: "Filename of skin when uploaded to the Museum. Note: In some cases a skin\nhas been uploaded under multiple names. Here we just pick one.",
                name: "filename",
                type: GraphQLString,
                args: {
                    normalize_extension: {
                        description: "If true, the the correct file extension (.wsz or .wal) will be .\nOtherwise, the original user-uploaded file extension will be used.",
                        name: "normalize_extension",
                        type: GraphQLBoolean,
                        defaultValue: false
                    }
                }
            },
            id: {
                description: "GraphQL ID of the skin",
                name: "id",
                type: new GraphQLNonNull(GraphQLID)
            },
            internet_archive_item: {
                description: "The skin's \"item\" at archive.org",
                name: "internet_archive_item",
                type: InternetArchiveItemType
            },
            md5: {
                description: "MD5 hash of the skin's file",
                name: "md5",
                type: GraphQLString
            },
            museum_url: {
                deprecationReason: "Needed for migration",
                name: "museum_url",
                type: GraphQLString
            },
            nsfw: {
                deprecationReason: "Needed for migration",
                name: "nsfw",
                type: GraphQLBoolean
            },
            readme_text: {
                deprecationReason: "Needed for migration",
                name: "readme_text",
                type: GraphQLString
            },
            reviews: {
                description: "Times that the skin has been reviewed either on the Museum's Tinder-style\nreivew page, or via the Discord bot.",
                name: "reviews",
                type: new GraphQLList(ReviewType)
            },
            screenshot_url: {
                name: "screenshot_url",
                type: GraphQLString
            },
            tweeted: {
                description: "Has the skin been tweeted?",
                name: "tweeted",
                type: GraphQLBoolean
            },
            tweets: {
                description: "List of `@winampskins` tweets that mentioned the skin.",
                name: "tweets",
                type: new GraphQLList(TweetType)
            },
            webamp_url: {
                deprecationReason: "Needed for migration",
                name: "webamp_url",
                type: GraphQLString
            }
        };
    }
});
const ArchiveFileType: GraphQLObjectType = new GraphQLObjectType({
    name: "ArchiveFile",
    description: "A file found within a Winamp Skin's .wsz archive",
    fields() {
        return {
            date: {
                description: "The date on the file inside the archive. Given in simplified extended ISO\nformat (ISO 8601).",
                name: "date",
                type: GraphQLString
            },
            file_md5: {
                description: "The md5 hash of the file within the archive",
                name: "file_md5",
                type: GraphQLString
            },
            filename: {
                description: "Filename of the file within the archive",
                name: "filename",
                type: GraphQLString
            },
            is_directory: {
                description: "Is the file a directory?",
                name: "is_directory",
                type: GraphQLBoolean
            },
            size: {
                description: "The uncompressed size of the file in bytes.\n\n**Note:** Will be `null` for directories",
                name: "size",
                type: GraphQLInt
            },
            skin: {
                description: "The skin in which this file was found",
                name: "skin",
                type: SkinType
            },
            text_content: {
                description: "The content of the file, if it's a text file",
                name: "text_content",
                type: GraphQLString
            },
            url: {
                description: "A URL to download the file. **Note:** This is powered by a little\nserverless Cloudflare function which tries to exctact the file on the fly.\nIt may not work for all files.",
                name: "url",
                type: GraphQLString
            }
        };
    }
});
const UserType: GraphQLObjectType = new GraphQLObjectType({
    name: "User",
    fields() {
        return {
            username: {
                name: "username",
                type: GraphQLString
            }
        };
    }
});
const NodeType: GraphQLInterfaceType = new GraphQLInterfaceType({
    description: "A globally unique object. The `id` here is intended only for use within\nGraphQL.\nhttps://graphql.org/learn/global-object-identification/",
    name: "Node",
    fields() {
        return {
            id: {
                name: "id",
                type: new GraphQLNonNull(GraphQLID)
            }
        };
    }
});
const ModernSkinType: GraphQLObjectType = new GraphQLObjectType({
    name: "ModernSkin",
    description: "A \"modern\" Winamp skin. These skins use the `.wal` file extension and are free-form.\n\nMost functionality in the Winamp Skin Museum is centered around \"classic\" skins,\nwhich are currently called just `Skin` in this schema.",
    fields() {
        return {
            archive_files: {
                description: "List of files contained within the skin's .wsz archive",
                name: "archive_files",
                type: new GraphQLList(ArchiveFileType)
            },
            average_color: {
                deprecationReason: "Needed for migration",
                name: "average_color",
                type: GraphQLString
            },
            download_url: {
                description: "URL to download the skin",
                name: "download_url",
                type: GraphQLString
            },
            filename: {
                description: "Filename of skin when uploaded to the Museum. Note: In some cases a skin\nhas been uploaded under multiple names. Here we just pick one.",
                name: "filename",
                type: GraphQLString,
                args: {
                    normalize_extension: {
                        description: "If true, the the correct file extension (.wsz or .wal) will be .\nOtherwise, the original user-uploaded file extension will be used.",
                        name: "normalize_extension",
                        type: GraphQLBoolean,
                        defaultValue: false
                    }
                }
            },
            id: {
                description: "GraphQL ID of the skin",
                name: "id",
                type: new GraphQLNonNull(GraphQLID)
            },
            internet_archive_item: {
                description: "The skin's \"item\" at archive.org",
                name: "internet_archive_item",
                type: InternetArchiveItemType
            },
            md5: {
                description: "MD5 hash of the skin's file",
                name: "md5",
                type: GraphQLString
            },
            museum_url: {
                deprecationReason: "Needed for migration",
                name: "museum_url",
                type: GraphQLString
            },
            nsfw: {
                deprecationReason: "Needed for migration",
                name: "nsfw",
                type: GraphQLBoolean
            },
            readme_text: {
                deprecationReason: "Needed for migration",
                name: "readme_text",
                type: GraphQLString
            },
            reviews: {
                description: "Times that the skin has been reviewed either on the Museum's Tinder-style\nreivew page, or via the Discord bot.",
                name: "reviews",
                type: new GraphQLList(ReviewType)
            },
            screenshot_url: {
                name: "screenshot_url",
                type: GraphQLString
            },
            tweeted: {
                description: "Has the skin been tweeted?",
                name: "tweeted",
                type: GraphQLBoolean
            },
            tweets: {
                description: "List of `@winampskins` tweets that mentioned the skin.",
                name: "tweets",
                type: new GraphQLList(TweetType)
            },
            webamp_url: {
                deprecationReason: "Needed for migration",
                name: "webamp_url",
                type: GraphQLString
            }
        };
    },
    interfaces() {
        return [NodeType, SkinType];
    }
});
const ModernSkinsConnectionType: GraphQLObjectType = new GraphQLObjectType({
    name: "ModernSkinsConnection",
    description: "A collection of \"modern\" Winamp skins",
    fields() {
        return {
            count: {
                description: "The total number of skins matching the filter",
                name: "count",
                type: GraphQLInt
            },
            nodes: {
                description: "The list of skins",
                name: "nodes",
                type: new GraphQLList(ModernSkinType)
            }
        };
    }
});
const SkinsConnectionType: GraphQLObjectType = new GraphQLObjectType({
    name: "SkinsConnection",
    description: "A collection of classic Winamp skins",
    fields() {
        return {
            count: {
                description: "The total number of skins matching the filter",
                name: "count",
                type: GraphQLInt
            },
            nodes: {
                description: "The list of skins",
                name: "nodes",
                type: new GraphQLList(SkinType)
            }
        };
    }
});
const SkinsFilterOptionType: GraphQLEnumType = new GraphQLEnumType({
    name: "SkinsFilterOption",
    values: {
        APPROVED: {
            value: "APPROVED"
        },
        NSFW: {
            value: "NSFW"
        },
        REJECTED: {
            value: "REJECTED"
        },
        TWEETED: {
            value: "TWEETED"
        }
    }
});
const SkinsSortOptionType: GraphQLEnumType = new GraphQLEnumType({
    name: "SkinsSortOption",
    values: {
        MUSEUM: {
            value: "MUSEUM"
        }
    }
});
const DatabaseStatisticsType: GraphQLObjectType = new GraphQLObjectType({
    name: "DatabaseStatistics",
    description: "Statistics about the contents of the Museum's database.",
    fields() {
        return {
            approved_skins_count: {
                description: "The number of skins that have been approved for tweeting. This includes both\ntweeted and untweeted skins.\n\n**Note:** Skins can be both approved and rejected by different users.",
                name: "approved_skins_count",
                type: GraphQLInt
            },
            nsfw_skins_count: {
                description: "The number of skins that have been marked as NSFW.\n\n**Note:** Skins can be approved and rejected by different users.\n**Note:** Generally skins that have been marked NSFW are also marked as rejected.",
                name: "nsfw_skins_count",
                type: GraphQLInt
            },
            rejected_skins_count: {
                description: "The number of skins that have been rejected for tweeting.\n\n**Note:** Skins can be both approved and rejected by different users.\n**Note:** Generally skins that have been marked NSFW are also marked as rejected.",
                name: "rejected_skins_count",
                type: GraphQLInt
            },
            tweetable_skins_count: {
                description: "The number of skins that have been approved for tweeting, but not yet tweeted.",
                name: "tweetable_skins_count",
                type: GraphQLInt
            },
            tweeted_skins_count: {
                description: "The number of skins in the Museum that have been tweeted by `@winampskins`",
                name: "tweeted_skins_count",
                type: GraphQLInt
            },
            unique_classic_skins_count: {
                description: "The total number of classic skins in the Museum's database",
                name: "unique_classic_skins_count",
                type: GraphQLInt
            },
            unreviewed_skins_count: {
                description: "The number of skins that have never been reviewed.",
                name: "unreviewed_skins_count",
                type: GraphQLInt
            },
            uploads_in_error_state_count: {
                description: "Skins uploads that have errored during processing.",
                name: "uploads_in_error_state_count",
                type: GraphQLInt
            },
            uploads_pending_processing_count: {
                description: "Skins uplaods awaiting processing. This can happen when there are a large\nnumber of skin uplaods at the same time, or when the skin uploading processing\npipeline gets stuck.",
                name: "uploads_pending_processing_count",
                type: GraphQLInt
            },
            web_uploads_count: {
                description: "Number of skins that have been uploaded to the Museum via the web interface.",
                name: "web_uploads_count",
                type: GraphQLInt
            }
        };
    }
});
const TweetsConnectionType: GraphQLObjectType = new GraphQLObjectType({
    name: "TweetsConnection",
    description: "A collection of tweets made by the `@winampskins` bot",
    fields() {
        return {
            count: {
                description: "The total number of tweets",
                name: "count",
                type: GraphQLInt
            },
            nodes: {
                description: "The list of tweets",
                name: "nodes",
                type: new GraphQLList(TweetType)
            }
        };
    }
});
const TweetsSortOptionType: GraphQLEnumType = new GraphQLEnumType({
    name: "TweetsSortOption",
    values: {
        LIKES: {
            value: "LIKES"
        },
        RETWEETS: {
            value: "RETWEETS"
        }
    }
});
const SkinUploadStatusType: GraphQLEnumType = new GraphQLEnumType({
    description: "The current status of a pending upload.\n\n**Note:** Expect more values here as we try to be more transparent about\nthe status of a pending uploads.",
    name: "SkinUploadStatus",
    values: {
        ARCHIVED: {
            value: "ARCHIVED"
        },
        DELAYED: {
            value: "DELAYED"
        },
        ERRORED: {
            value: "ERRORED"
        },
        UPLOAD_REPORTED: {
            value: "UPLOAD_REPORTED"
        },
        URL_REQUESTED: {
            value: "URL_REQUESTED"
        }
    }
});
const SkinUploadType: GraphQLObjectType = new GraphQLObjectType({
    name: "SkinUpload",
    description: "Information about an attempt to upload a skin to the Museum.",
    fields() {
        return {
            id: {
                name: "id",
                type: GraphQLString
            },
            skin: {
                description: "Skin that was uploaded. **Note:** This is null if the skin has not yet been\nfully processed. (status == ARCHIVED)",
                name: "skin",
                type: SkinType
            },
            status: {
                name: "status",
                type: SkinUploadStatusType
            },
            upload_md5: {
                description: "Md5 hash given when requesting the upload URL.",
                name: "upload_md5",
                type: GraphQLString
            }
        };
    }
});
const QueryType: GraphQLObjectType = new GraphQLObjectType({
    name: "Query",
    fields() {
        return {
            fetch_archive_file_by_md5: {
                description: "Fetch archive file by it's MD5 hash\n\nGet information about a file found within a skin's wsz/wal/zip archive.",
                name: "fetch_archive_file_by_md5",
                type: ArchiveFileType,
                args: {
                    md5: {
                        name: "md5",
                        type: new GraphQLNonNull(GraphQLString)
                    }
                },
                resolve(source, args, context) {
                    return queryFetch_archive_file_by_md5Resolver(source, args, context);
                }
            },
            fetch_internet_archive_item_by_identifier: {
                description: "Get an archive.org item by its identifier. You can find this in the URL:\n\nhttps://archive.org/details/<identifier>/",
                name: "fetch_internet_archive_item_by_identifier",
                type: InternetArchiveItemType,
                args: {
                    identifier: {
                        name: "identifier",
                        type: new GraphQLNonNull(GraphQLString)
                    }
                },
                resolve(source, args, context) {
                    return queryFetch_internet_archive_item_by_identifierResolver(source, args, context);
                }
            },
            fetch_skin_by_md5: {
                description: "Get a skin by its MD5 hash",
                name: "fetch_skin_by_md5",
                type: SkinType,
                args: {
                    md5: {
                        name: "md5",
                        type: new GraphQLNonNull(GraphQLString)
                    }
                },
                resolve(source, args, context) {
                    return queryFetch_skin_by_md5Resolver(source, args, context);
                }
            },
            fetch_tweet_by_url: {
                description: "Get a tweet by its URL",
                name: "fetch_tweet_by_url",
                type: TweetType,
                args: {
                    url: {
                        name: "url",
                        type: new GraphQLNonNull(GraphQLString)
                    }
                },
                resolve(source, args, context) {
                    return queryFetch_tweet_by_urlResolver(source, args, context);
                }
            },
            me: {
                description: "The currently authenticated user, if any.",
                name: "me",
                type: UserType,
                resolve(source) {
                    return queryMeResolver(source);
                }
            },
            modern_skins: {
                description: "All modern skins in the database",
                name: "modern_skins",
                type: ModernSkinsConnectionType,
                args: {
                    first: {
                        name: "first",
                        type: new GraphQLNonNull(GraphQLInt),
                        defaultValue: 10
                    },
                    offset: {
                        name: "offset",
                        type: new GraphQLNonNull(GraphQLInt),
                        defaultValue: 0
                    }
                },
                resolve(source, args) {
                    return queryModern_skinsResolver(source, args);
                }
            },
            node: {
                description: "Get a globally unique object by its ID.\n\nhttps://graphql.org/learn/global-object-identification/",
                name: "node",
                type: NodeType,
                args: {
                    id: {
                        name: "id",
                        type: new GraphQLNonNull(GraphQLID)
                    }
                },
                resolve(source, args, context) {
                    return queryNodeResolver(source, args, context);
                }
            },
            search_skins: {
                description: "Search the database using the Algolia search index used by the Museum.\n\nUseful for locating a particular skin.",
                name: "search_skins",
                type: new GraphQLList(SkinType),
                args: {
                    first: {
                        name: "first",
                        type: new GraphQLNonNull(GraphQLInt),
                        defaultValue: 10
                    },
                    offset: {
                        name: "offset",
                        type: new GraphQLNonNull(GraphQLInt),
                        defaultValue: 0
                    },
                    query: {
                        name: "query",
                        type: new GraphQLNonNull(GraphQLString)
                    }
                },
                resolve(source, args, context) {
                    return querySearch_skinsResolver(source, args, context);
                }
            },
            skin_to_review: {
                description: "A random skin that needs to be reviewed",
                name: "skin_to_review",
                type: SkinType,
                resolve(source, args, context) {
                    return querySkin_to_reviewResolver(source, args, context);
                }
            },
            skins: {
                description: "All classic skins in the database\n\n**Note:** We don't currently support combining sorting and filtering.",
                name: "skins",
                type: SkinsConnectionType,
                args: {
                    filter: {
                        name: "filter",
                        type: SkinsFilterOptionType
                    },
                    first: {
                        name: "first",
                        type: new GraphQLNonNull(GraphQLInt),
                        defaultValue: 10
                    },
                    offset: {
                        name: "offset",
                        type: new GraphQLNonNull(GraphQLInt),
                        defaultValue: 0
                    },
                    sort: {
                        name: "sort",
                        type: SkinsSortOptionType
                    }
                },
                resolve(source, args) {
                    return querySkinsResolver(source, args);
                }
            },
            statistics: {
                description: "A namespace for statistics about the database",
                name: "statistics",
                type: DatabaseStatisticsType,
                resolve(source) {
                    return queryStatisticsResolver(source);
                }
            },
            tweets: {
                description: "Tweets tweeted by `@winampskins`",
                name: "tweets",
                type: TweetsConnectionType,
                args: {
                    first: {
                        name: "first",
                        type: new GraphQLNonNull(GraphQLInt),
                        defaultValue: 10
                    },
                    offset: {
                        name: "offset",
                        type: new GraphQLNonNull(GraphQLInt),
                        defaultValue: 0
                    },
                    sort: {
                        name: "sort",
                        type: TweetsSortOptionType
                    }
                },
                resolve(source, args) {
                    return queryTweetsResolver(source, args);
                }
            },
            upload_statuses: {
                description: "Get the status of a batch of uploads by ids",
                name: "upload_statuses",
                type: new GraphQLList(SkinUploadType),
                args: {
                    ids: {
                        name: "ids",
                        type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(GraphQLString)))
                    }
                },
                resolve(source, args, context) {
                    return queryUpload_statusesResolver(source, args, context);
                }
            },
            upload_statuses_by_md5: {
                description: "Get the status of a batch of uploads by md5s",
                deprecationReason: "Prefer `upload_statuses` instead, were we operate on ids.",
                name: "upload_statuses_by_md5",
                type: new GraphQLList(SkinUploadType),
                args: {
                    md5s: {
                        name: "md5s",
                        type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(GraphQLString)))
                    }
                },
                resolve(source, args, context) {
                    return queryUpload_statuses_by_md5Resolver(source, args, context);
                }
            }
        };
    }
});
const UploadUrlType: GraphQLObjectType = new GraphQLObjectType({
    name: "UploadUrl",
    description: "A URL that the client can use to upload a skin to S3, and then notify the server\nwhen they're done.",
    fields() {
        return {
            id: {
                name: "id",
                type: GraphQLString
            },
            md5: {
                name: "md5",
                type: GraphQLString
            },
            url: {
                name: "url",
                type: GraphQLString
            }
        };
    }
});
const UploadUrlRequestType: GraphQLInputObjectType = new GraphQLInputObjectType({
    description: "Input object used for a user to request an UploadUrl",
    name: "UploadUrlRequest",
    fields() {
        return {
            filename: {
                name: "filename",
                type: new GraphQLNonNull(GraphQLString)
            },
            md5: {
                name: "md5",
                type: new GraphQLNonNull(GraphQLString)
            }
        };
    }
});
const UploadMutationsType: GraphQLObjectType = new GraphQLObjectType({
    name: "UploadMutations",
    description: "Mutations for the upload flow\n\n1. The user finds the md5 hash of their local files.\n2. (`get_upload_urls`) The user requests upload URLs for each of their files.\n3. The server returns upload URLs for each of their files which are not already in the collection.\n4. The user uploads each of their files to the URLs returned in step 3.\n5. (`report_skin_uploaded`) The user notifies the server that they're done uploading.\n6. (TODO) The user polls for the status of their uploads.",
    fields() {
        return {
            get_upload_urls: {
                description: "Get a (possibly incomplete) list of UploadUrls for each of the files. If an\nUploadUrl is not returned for a given hash, it means the file is already in\nthe collection.",
                name: "get_upload_urls",
                type: new GraphQLList(UploadUrlType),
                args: {
                    files: {
                        name: "files",
                        type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(UploadUrlRequestType)))
                    }
                }
            },
            report_skin_uploaded: {
                description: "Notify the server that the user is done uploading.",
                name: "report_skin_uploaded",
                type: GraphQLBoolean,
                args: {
                    id: {
                        name: "id",
                        type: new GraphQLNonNull(GraphQLString)
                    },
                    md5: {
                        name: "md5",
                        type: new GraphQLNonNull(GraphQLString)
                    }
                }
            }
        };
    }
});
const MutationType: GraphQLObjectType = new GraphQLObjectType({
    name: "Mutation",
    fields() {
        return {
            approve_skin: {
                description: "Approve skin for tweeting\n\n**Note:** Requires being logged in",
                name: "approve_skin",
                type: GraphQLBoolean,
                args: {
                    md5: {
                        name: "md5",
                        type: new GraphQLNonNull(GraphQLString)
                    }
                },
                resolve(source, args, context) {
                    return mutationApprove_skinResolver(source, args, context);
                }
            },
            mark_skin_nsfw: {
                description: "Mark a skin as NSFW\n\n**Note:** Requires being logged in",
                name: "mark_skin_nsfw",
                type: GraphQLBoolean,
                args: {
                    md5: {
                        name: "md5",
                        type: new GraphQLNonNull(GraphQLString)
                    }
                },
                resolve(source, args, context) {
                    return mutationMark_skin_nsfwResolver(source, args, context);
                }
            },
            reject_skin: {
                description: "Reject skin for tweeting\n\n**Note:** Requires being logged in",
                name: "reject_skin",
                type: GraphQLBoolean,
                args: {
                    md5: {
                        name: "md5",
                        type: new GraphQLNonNull(GraphQLString)
                    }
                },
                resolve(source, args, context) {
                    return mutationReject_skinResolver(source, args, context);
                }
            },
            request_nsfw_review_for_skin: {
                description: "Request that an admin check if this skin is NSFW.\nUnlike other review mutation endpoints, this one does not require being logged\nin.",
                name: "request_nsfw_review_for_skin",
                type: GraphQLBoolean,
                args: {
                    md5: {
                        name: "md5",
                        type: new GraphQLNonNull(GraphQLString)
                    }
                },
                resolve(source, args, context) {
                    return mutationRequest_nsfw_review_for_skinResolver(source, args, context);
                }
            },
            send_feedback: {
                description: "Send a message to the admin of the site. Currently this appears in Discord.",
                name: "send_feedback",
                type: GraphQLBoolean,
                args: {
                    email: {
                        name: "email",
                        type: GraphQLString
                    },
                    message: {
                        name: "message",
                        type: new GraphQLNonNull(GraphQLString)
                    },
                    url: {
                        name: "url",
                        type: GraphQLString
                    }
                },
                resolve(source, args, context) {
                    return mutationSend_feedbackResolver(source, args, context);
                }
            },
            upload: {
                description: "Mutations for the upload flow",
                name: "upload",
                type: UploadMutationsType,
                resolve(source) {
                    return mutationUploadResolver(source);
                }
            }
        };
    }
});
const ClassicSkinType: GraphQLObjectType = new GraphQLObjectType({
    name: "ClassicSkin",
    description: "A classic Winamp skin",
    fields() {
        return {
            archive_files: {
                description: "List of files contained within the skin's .wsz archive",
                name: "archive_files",
                type: new GraphQLList(ArchiveFileType)
            },
            average_color: {
                description: "String representation (rgb usually) of the skin's average color",
                name: "average_color",
                type: GraphQLString
            },
            download_url: {
                description: "URL to download the skin",
                name: "download_url",
                type: GraphQLString
            },
            filename: {
                description: "Filename of skin when uploaded to the Museum. Note: In some cases a skin\nhas been uploaded under multiple names. Here we just pick one.",
                name: "filename",
                type: GraphQLString,
                args: {
                    normalize_extension: {
                        description: "If true, the the correct file extension (.wsz or .wal) will be .\nOtherwise, the original user-uploaded file extension will be used.",
                        name: "normalize_extension",
                        type: GraphQLBoolean,
                        defaultValue: false
                    }
                }
            },
            has_media_library: {
                description: "Does the skin include sprite sheets for the media library?",
                name: "has_media_library",
                type: GraphQLBoolean
            },
            id: {
                description: "GraphQL ID of the skin",
                name: "id",
                type: new GraphQLNonNull(GraphQLID)
            },
            internet_archive_item: {
                description: "The skin's \"item\" at archive.org",
                name: "internet_archive_item",
                type: InternetArchiveItemType
            },
            last_algolia_index_update_date: {
                description: "The date on which this skin was last updated in the Algolia search index.\nGiven in simplified extended ISO format (ISO 8601).",
                name: "last_algolia_index_update_date",
                type: GraphQLString
            },
            md5: {
                description: "MD5 hash of the skin's file",
                name: "md5",
                type: GraphQLString
            },
            museum_url: {
                description: "URL of the skin on the Winamp Skin Museum",
                name: "museum_url",
                type: GraphQLString
            },
            nsfw: {
                description: "Has the skin been flagged as \"not safe for wrok\"?",
                name: "nsfw",
                type: GraphQLBoolean
            },
            readme_text: {
                description: "Text of the readme file extracted from the skin",
                name: "readme_text",
                type: GraphQLString
            },
            reviews: {
                description: "Times that the skin has been reviewed either on the Museum's Tinder-style\nreivew page, or via the Discord bot.",
                name: "reviews",
                type: new GraphQLList(ReviewType)
            },
            screenshot_url: {
                description: "URL of a screenshot of the skin",
                name: "screenshot_url",
                type: GraphQLString
            },
            transparent_pixels: {
                description: "The number of transparent pixels rendered by the skin.",
                name: "transparent_pixels",
                type: GraphQLInt
            },
            tweeted: {
                description: "Has the skin been tweeted?",
                name: "tweeted",
                type: GraphQLBoolean
            },
            tweets: {
                description: "List of `@winampskins` tweets that mentioned the skin.",
                name: "tweets",
                type: new GraphQLList(TweetType)
            },
            webamp_url: {
                description: "URL of webamp.org with the skin loaded",
                name: "webamp_url",
                type: GraphQLString
            }
        };
    },
    interfaces() {
        return [NodeType, SkinType];
    }
});
const schema = new GraphQLSchema({
    query: QueryType,
    mutation: MutationType,
    types: [ArchiveFileType, ClassicSkinType, DatabaseStatisticsType, InternetArchiveItemType, ModernSkinType, ModernSkinsConnectionType, MutationType, NodeType, QueryType, RatingType, ReviewType, SkinType, SkinUploadType, SkinUploadStatusType, SkinsConnectionType, SkinsFilterOptionType, SkinsSortOptionType, TweetType, TweetsConnectionType, TweetsSortOptionType, UploadMutationsType, UploadUrlType, UploadUrlRequestType, UserType]
});
export { schema };
